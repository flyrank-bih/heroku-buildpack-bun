#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>
# $HOME: /app

# -e - always exit on error
# -o pipefail - don't ignore exit codes when piping output
set -eo pipefail

BUILD_DIR=${1:-.}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd "$(dirname "${0:-}")/.." && pwd)

### Load dependencies
source "$BP_DIR/lib/json.sh"

HEROKU_DIR=$BUILD_DIR/.heroku
BIN_DIR=$HEROKU_DIR/bin

# Export the content of the ENV_DIR into the environment
export_env_vars() {
  if [ -d "$ENV_DIR" ]; then
    for e in $(ls $ENV_DIR); do
      export "$e=$(cat $ENV_DIR/$e)"
    done
  fi
}

# Determine Bun version
determine_bun_version() {
  if [ -f $BUILD_DIR/.bun-version ]; then
    BUN_VERSION="$(cat $BUILD_DIR/.bun-version)"
  elif [ -f $BUILD_DIR/runtime.bun.txt ]; then
    BUN_VERSION="$(cat $BUILD_DIR/runtime.bun.txt)"
  elif [ -f $BUILD_DIR/runtime.txt ]; then
    BUN_VERSION="$(cat $BUILD_DIR/runtime.txt)"
  elif [ -n "$BUN_VERSION" ]; then
    echo "Using BUN_VERSION from environment: $BUN_VERSION"
  else
    echo "No Bun version specified, using latest stable version"
  fi

  if [[ -n $BUN_VERSION && $BUN_VERSION =~ ^[0-9] ]]; then
    BUN_VERSION="v${BUN_VERSION}"
  fi
}

# Install Bun
install_bun() {
  log "Installing Bun $BUN_VERSION"
  export BUN_INSTALL=$BUILD_DIR/.heroku
  export BUN_DIR=$BUILD_DIR/.heroku/cache
  curl -fsSL --retry-connrefused --retry 3 https://bun.sh/install | bash ${BUN_VERSION:+-s bun-$BUN_VERSION}
  export PATH="$BUN_INSTALL/bin:$PATH"
}

# Set up environment variables
setup_env_vars() {
  PROFILE_PATH="$BUILD_DIR/.profile.d/bun.sh"
  mkdir -p $(dirname $PROFILE_PATH)
  echo 'export PATH="$HOME/.heroku/bin:$PATH"' >>$PROFILE_PATH
  echo 'export BUN_DIR="$HOME/.heroku/cache"' >>$PROFILE_PATH

  echo "export PATH=\"$BUILD_DIR/.heroku/bin:\$PATH\"" >>"$BP_DIR/export"
  echo "export BUN_DIR=\"$BUILD_DIR/.heroku/cache\"" >>"$BP_DIR/export"
}

# Run npm scripts if they exist
run_npm_script() {
  local script_name=$1
  local skip_file=".skip-bun-$script_name"
  if [[ $(has_script "package.json" "$script_name") == "true" && ! -f $skip_file ]]; then
    log "Running $script_name script..."
    bun run $script_name
  fi
}

# Main function
main() {
  export_env_vars
  determine_bun_version
  install_bun
  setup_env_vars

  log "Installed Bun v$(bun --version)"

  cd $BUILD_DIR

if [[ -f package.json && ! -f .skip-bun-install ]]; then
  log "Installing dependencies..."
  if [ "$NODE_ENV" = "production" ]; then
    log "Installing production dependencies only..."
    bun install --production --no-frozen-lockfile
  else
    bun install --no-frozen-lockfile
  fi
fi

  run_npm_script "heroku-prebuild"
  run_npm_script "build"
  run_npm_script "heroku-postbuild"
}

# Logging function
log() {
  echo "-----> $*"
}

# Error handling
handle_error() {
  log "Error: $1"
  exit 1
}

# Trap errors
trap 'handle_error "An error occurred. Check the build logs for details."' ERR

# Execute main function
main